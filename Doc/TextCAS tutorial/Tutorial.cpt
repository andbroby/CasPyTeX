#? Title=CasPyTeX TextCAS Tutorial
#? date=
TextCAS is a CAS written in a text file, then compiled to LaTeX. The Syntax is inspired by markdown. Tutorial.cpt is the source for this .pdf.
#?startlatex
\begin{center}\textbf{Preamble Examples}\end{center}
#?endlatex
You write the Title, Author and date of the paper like this:
#?startlatex
\begin{verbatim}
 #?Title=Name of the paper
 #?Author=Author of the paper
 #?Date=Date
\end{verbatim}
#?endlatex
If no Title is specified, Then none of the 3 informations will be printed to the paper. 
If no Author is specified, Then it won't be printed to the paper.
If no date is specified, the current date will be printed. If this is not wanted, you can always write nothing after the equal sign.

Any option in CasPyTeXConfig.py can be overwritten like this:
#?startlatex
\begin{verbatim}
 #?Use_Radians=False
\end{verbatim}
#?endlatex
#?startlatex
\begin{center}\textbf{Syntax Examples}\end{center}
#?endlatex
This is the big heading
=======================
The big heading will appear in these two ways:

#?startlatex

\begin{verbatim}
This is the big heading
==================
\end{verbatim}
or
\begin{verbatim}
##This is the big heading
\end{verbatim}
#?endlatex
This is the small heading
-----------------
The small heading can also be called in two ways:
#?startlatex
\begin{verbatim}
This is the small heading
---------------
\end{verbatim}
or
\begin{verbatim}
#This is the small heading
\end{verbatim}
#?endlatex

You can write *italic* or **bold**
syntax:
#?startlatex
\begin{verbatim}
You can write *italic* or **bold**
\end{verbatim}
#?endlatex

However, sometimes you may want to include something that isn't implemented through the standard syntax. Maybe you want to write a table, like this:
#?startlatex
\begin{center}
  \begin{tabular}{ l | c || r }
    \hline
    1 & 2 & 3 \\ \hline
    4 & 5 & 6 \\ \hline
    7 & 8 & 9 \\
    \hline
  \end{tabular}
\end{center}
#?endlatex
Everytime you want to write \LaTeX, just surround the lines with:
#?startlatex
\begin{verbatim}
  #?startlatex
\end{verbatim}
and
\begin{verbatim}
  #?endlatex
\end{verbatim}
#?endlatex

#?startlatex
\begin{center}\section*{The CAS}\end{center}
#?endlatex
Defining a value:
|a:=2*_pi|
syntax:

#?startlatex
\begin{verbatim}
    |a:=2*_pi|
\end{verbatim}
#?endlatex

Calculating a value:
|2*a^2|
\newpage syntax:
#?startlatex
\begin{verbatim}
    |2*a^2|
\end{verbatim}
#?endlatex
Approximations:
||sqrt(2)||
syntax:
#?startlatex
\begin{verbatim}
    ||sqrt(2)||
\end{verbatim}
#?endlatex
Already defined values can be forgotten like this:
#?startlatex
\begin{verbatim}
  #?forget a
\end{verbatim}
#?endlatex
#?forget a
|a|
Let's say you have a bunch of definitions, like this:
|p_{1}:=11|
|p_{2}:=13|
|p_{3}:=17|
|p_{4}:=19|
If you want to delete them all, just write:
#?startlatex
\begin{verbatim}
  #?forgetall
\end{verbatim}
#?endlatex
#?forgetall
|p_{1}|
|p_{2}|
|p_{3}|
|p_{4}|
Now they're all gone. But remember that the CAS only forgets the definitions from **now on**.

Function definitions work the same way:
|s(t):=0.33_m/_s^2*t^2-2_m/_s*t|
And you can call them:
|s(15_s)|
Syntax:
#?startlatex
\begin{verbatim}
 |s(t):=0.33_m/_s^2*t^2-2_m/_s*t|
 |s(15_s)|
\end{verbatim}
#?endlatex
Solving in CasPyTeX is a lot like every other CAS:
|solve(3*k=30_m,k)|
Syntax:
#?startlatex
\begin{verbatim}
  |solve(3*k=200_m,k)|
\end{verbatim}
#?endlatex